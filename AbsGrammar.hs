

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [Stmt]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDecl Type Ident [Arg] Block
    | VarDecl Type [Item]
    | ConstDecl Type [Item]
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Ass Ident Expr
    | Incr Ident
    | Decr Ident
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | ElseCond Expr Stmt Stmt
    | While Expr Stmt
    | For Ident Expr Expr Stmt
    | Break
    | Continue
    | StmtExp Expr
    | StmtDecl TopDef
  deriving (Eq, Ord, Show, Read)

data Type = Int | Str | Bool | Void
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | EInt Integer
    | ETrue
    | EFalse
    | EApp Ident [Expr]
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Mul | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = Lth | Le | Gth | Ge | Eq | Ne
  deriving (Eq, Ord, Show, Read)


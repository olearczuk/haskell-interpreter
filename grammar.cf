-- Programs ----------------------------------------------------

entrypoints Program ;

Program.	Program ::= [TopDef] ;

FnDecl.		TopDef ::= Type Ident "(" [Arg] ")" Block ;

VarDecl.    TopDef ::= Type [Item] ";" ;

ConstDecl.  TopDef ::= "const" Type [Item] ";" ;

NoInit.		Item ::= Ident ;

Init.       Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

separator nonempty TopDef "" ;

Arg.         Arg ::= Type Ident;

separator    Arg "," ;

-- Statements --------------------------------------------------

Block.      Block ::= "{" [Stmt] "}" ;

separator Stmt "" ;

Empty.      Stmt ::= ";" ;

BStmt.      Stmt ::= Block ;

Ass.        Stmt ::= Ident "=" Expr ";";

Incr.       Stmt ::= Ident "++" ";" ;

Decr.       Stmt ::= Ident "--" ";" ;

Ret.        Stmt ::= "return" Expr ";" ;

VRet.       Stmt ::= "return" ";" ;

Cond.       Stmt ::= "if" "(" Expr ")" Stmt ;

ElseCond.   Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;

While.      Stmt ::= "while" "(" Expr ")" Stmt ;

For.		Stmt ::= "for" "(" Ident "=" Expr "to" Expr ")" Stmt ;

Break.      Stmt ::= "break" ";" ;

Continue.   Stmt ::= "continue" ";" ;

StmtExp.    Stmt ::= Expr ";" ;

StmtDecl.   Stmt ::= TopDef ;

-- Types -------------------------------------------------------

Int.        Type ::= "int" ;

Str.		Type ::= "string" ;

Bool.		Type ::= "bool" ;

Void.       Type ::= "void" ;

separator Type "," ;

-- Expressions -------------------------------------------------

EVar.       Expr6 ::= Ident ;

EInt.		Expr6 ::= Integer ;

ETrue.		Expr6 ::= "true";

EFalse.		Expr6 ::= "false" ;

EApp.		Expr6 ::= Ident "(" [Expr] ")" ;

EString.	Expr6 ::= String ;

Neg.		Expr6 ::= "-" Expr6 ;

Not.		Expr6 ::= "!" Expr6 ;

EMul.		Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.		Expr3 ::= Expr3 AddOp Expr4 ;

ERel.		Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.		Expr1 ::= Expr2 "&&" Expr1 ;

EOr.		Expr ::= Expr1 "||" Expr ;

coercions Expr 6 ;

separator Expr "," ;

-- Operators ---------------------------------------------------

Plus.	    AddOp ::= "+" ;

Minus.		AddOp ::= "-" ;

Mul.		MulOp ::= "*" ;

Div.		MulOp ::= "/" ;

Mod.		MulOp ::= "%" ;

Lth.		RelOp ::= "<" ;

Le.			RelOp ::= "<=" ;

Gth.		RelOp ::= ">" ;

Ge. 		RelOp ::= ">=" ;

Eq.			RelOp ::= "==" ;

Ne.			RelOp ::= "!=" ;

-- Comments ----------------------------------------------------
comment     "//" ;
comment     "/*" "*/" ;